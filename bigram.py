# -*- coding: utf-8 -*-
"""gpt-from-scratch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t4YulPsVbLCDvJQwG_5VVEpj-N9noGOg
"""
# Module import
import torch
import torch.nn as nn
from torch.nn import functional as F

# hyperparameters
max_iters = 5000
eval_interval = 300
block_size = 8 # block size is the size of text chunk that is used for training at one time
batch_size = 32 # batch size determines amount of parallelism, i.e, how many chunks are trained at a time
learning_rate = 1e-03
device = 'cuda' if torch.cuda.is_available() else 'cpu'
n_embd = 32
eval_iters = 200

torch.manual_seed(1337)

# Download dataset to train on. Using tiny Shakespeare for this test.

# !wget https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt

with open('input.txt', 'r', encoding = 'utf-8') as f:
  text = f.read()

# get all characters in the text

chars = sorted(list(set(text)))
vocab_size = len(chars)

# print(''.join(chars))
# print(vocab_size)

# define encoder and decoder functions

stoi = { ch:i for i, ch in enumerate(chars) }
itos = { i:ch for i, ch in enumerate(chars) }

encode = lambda s: [stoi[c] for c in s]
decode = lambda l: ''.join([itos[i] for i in l])

# test out encoder and decoder

# print(encode('hii there'))
# print(decode(encode('hii there')))

# TODO: Add subword tokenizer (tiktoken) instead of the simple character-level tokenizer as done above

data_tensor = torch.tensor(encode(text), dtype = torch.long)
n_split = int(0.9*len(data_tensor))
train_data = data_tensor[:n_split]
val_data = data_tensor[n_split:]

# generate a batch of data of inputs x and targets y
def get_batch(split):
  data = train_data if split == 'train' else val_data
  ix = torch.randint(len(data) - block_size, (batch_size,)) # random offset in the data
  x = torch.stack([data[i:i+block_size] for i in ix])
  y = torch.stack([data[i+1:i+1+block_size] for i in ix])
  return x, y

@torch.no_grad()
def estimate_loss():
  out = {}
  model.eval()
  for split in ['train', 'val']:
    losses = torch.zeros(eval_iters)
    for k in range(eval_iters):
      X, Y = get_batch(split)
      logits, loss = model(X, Y)
      losses[k] = loss.item()
    out[split] = losses.mean()
  model.train()
  return out

# bigram language model: simplest language model

class BigramLanguageModel(nn.Module):

  def __init__(self):
    super().__init__()
    self.token_embedding_table = nn.Embedding(vocab_size, n_embd)
    self.position_embedding_table = nn.Embedding(block_size, n_embd)
    self.lm_head = nn.Linear(n_embd, vocab_size)

  def forward(self, idx, targets = None):
    B, T = idx.shape
    tok_emb = self.token_embedding_table(idx)
    pos_emb = self.position_embedding_table(torch.range(T, device=device))
    x = tok_emb + pos_emb
    logits = self.lm_head(x)
    if targets == None:
        loss = None
    else:
      # data reordering to make pytorch happy (requires inputs in dimensions [B, C, T] rather than [B, T, C])
      B, T, C = logits.shape
      logits = logits.view(B*T, C)
      targets = targets.view(B*T)
      loss = F.cross_entropy(logits, targets)
    return logits, loss

  def generate(self, idx, max_new_tokens):
    for _ in range(max_new_tokens):
      # get prediction
      logits, loss = self(idx)
      logits = logits[:,-1,:]
      # apply softmax
      probs = F.softmax(logits, dim= -1)
      # sample next from distribution
      idx_next = torch.multinomial(probs, num_samples = 1)
      idx = torch.cat((idx, idx_next), dim = 1)

    return idx

model = BigramLanguageModel()
m = model.to(device)

# create PyTorch optimizer
optimizer = torch.optim.AdamW(m.parameters(), lr = learning_rate)

for iter in range(max_iters):
  if iter % eval_interval == 0:
    losses = estimate_loss()
    print(f"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}")
  
  # sample batch from train data
  xb, yb = get_batch('train')

  # loss eval
  logits, loss = m(xb, yb)
  optimizer.zero_grad(set_to_none=True)
  loss.backward()
  optimizer.step()

ctx = torch.zeros((1,1), dtype=torch.long, device = device)
print(decode(m.generate(ctx, max_new_tokens=500)[0].tolist()))